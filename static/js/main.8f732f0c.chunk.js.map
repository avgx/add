{"version":3,"sources":["components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Main","React","lazy","Boolean","window","location","hostname","match","iEVersion","ua","navigator","userAgent","msie","indexOf","parseInt","substring","rv","getIEVersion","ReactDOM","render","document","getElementById","fallback","style","height","margin","padding","display","justifyContent","alignItems","path","component","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAeMA,G,MAAOC,IAAMC,MAAK,kBAAM,wDCHVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IA6BMC,EA7Be,WACnB,IAAMC,EAAKL,OAAOM,UAAUC,UACtBC,EAAOH,EAAGI,QAAQ,SACxB,GAAID,EAAO,EAET,OAAOE,SAASL,EAAGM,UAAUH,EAAO,EAAGH,EAAGI,QAAQ,IAAKD,IAAQ,IAGjE,GADgBH,EAAGI,QAAQ,YACb,EAAG,CAEf,IAAMG,EAAKP,EAAGI,QAAQ,OACtB,OAAOC,SAASL,EAAGM,UAAUC,EAAK,EAAGP,EAAGI,QAAQ,IAAKG,IAAM,IAQ7D,OAAO,EAUSC,GAEdT,GAAaA,GAAa,GAC5BU,IAASC,OAAO,mBATa,kBAC7B,6BACE,2EAOc,MAA4BC,SAASC,eAAe,SAEpEH,IAASC,OACP,kBAAC,IAAD,KACE,mBF3BS,WACb,OACE,6BACE,kBAAC,WAAD,CAAUG,SACR,yBAAKC,MAAO,CACVC,OAAQ,OAAQC,OAAQ,EAAGC,QAAS,EACpCC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAEZ,kBAAC,IAAD,MANF,uBASF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,2EAA2EC,UAAW/B,IAClG,kBAAC,IAAD,CAAO8B,KAAK,4DAA4DC,UAAW/B,IACnF,kBAAC,IAAD,CAAO8B,KAAK,2CAA2CC,UAAW/B,IAClE,kBAAC,IAAD,CAAO8B,KAAK,0BAA0BC,UAAW/B,IACjD,kBAAC,IAAD,CAAO8B,KAAK,kBAAkBC,UAAW/B,IACzC,kBAAC,IAAD,CAAO8B,KAAK,uCAAuCC,UAAW/B,IAE9D,kBAAC,IAAD,CAAO8B,KAAK,GAAGC,UAAW/B,SEM5B,OAEJoB,SAASC,eAAe,SD6FpB,kBAAmBX,WACrBA,UAAUsB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8f732f0c.chunk.js","sourcesContent":["import React, { Suspense } from \"react\";\nimport {\n  Switch as RouterSwitch,\n  Route,\n  Link,\n  Redirect,\n  useParams,\n  useLocation,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport \"./App.css\";\nimport App2 from \"./App2\";\n//For no lazy loading:\n//import Main from \"./Main\";\nconst Main = React.lazy(() => import('./Main'));\n\nexport default function App() {\n  return (\n    <div>\n      <Suspense fallback={\n        <div style={{\n          height: '90vh', margin: 0, padding: 0,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}>\n          <DashboardIcon/>&nbsp;&nbsp;Loading...\n        </div>\n      }>\n      <RouterSwitch>\n        <Route path=\"/dashboard/:dashboardId/widget/:widgetId/mode/:widgetMode/event/:eventId\" component={Main} />\n        <Route path=\"/dashboard/:dashboardId/widget/:widgetId/mode/:widgetMode\" component={Main} />\n        <Route path=\"/dashboard/:dashboardId/widget/:widgetId\" component={Main} />\n        <Route path=\"/dashboard/:dashboardId\" component={Main} />\n        <Route path=\"/event/:eventId\" component={Main} />\n        <Route path=\"/inbox/dashboard/file/:dashboardFile\" component={Main} />\n        {/* <Route exact path=\"/\" component={App} /> */}\n        <Route path=\"\" component={Main} />\n      </RouterSwitch>\n      </Suspense>\n    </div>\n  );\n  //For no lazy loading:\n  // return (\n  //   <RouterSwitch>\n  //     <Route path=\"/dashboard/:dashboardId/widget/:widgetId/mode/:widgetMode/event/:eventId\" component={Main} />\n  //     <Route path=\"/dashboard/:dashboardId/widget/:widgetId/mode/:widgetMode\" component={Main} />\n  //     <Route path=\"/dashboard/:dashboardId/widget/:widgetId\" component={Main} />\n  //     <Route path=\"/dashboard/:dashboardId\" component={Main} />\n  //     <Route path=\"/inbox/dashboard/file/:dashboardFile\" component={Main} />\n  //     {/* <Route exact path=\"/\" component={App} /> */}\n  //     <Route path=\"\" component={Main} />\n  //   </RouterSwitch>\n  // );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// get the Version of Browser, older than '11'\nconst getIEVersion = () => {\n  const ua = window.navigator.userAgent;\n  const msie = ua.indexOf(\"MSIE \");\n  if (msie > 0) {\n    // IE 10 or older => return version number\n    return parseInt(ua.substring(msie + 5, ua.indexOf(\".\", msie)), 10);\n  }\n  const trident = ua.indexOf(\"Trident/\");\n  if (trident > 0) {\n    // IE 11 => return version number\n    const rv = ua.indexOf(\"rv:\");\n    return parseInt(ua.substring(rv + 3, ua.indexOf(\".\", rv)), 10);\n  }\n  // const edge = ua.indexOf('Edge/');\n  // if (edge > 0) {\n  //   // Edge (IE 12+) => return version number\n  //   return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n  // }\n  // other browser\n  return false;\n};\n\n// Method for Rendering of Unsupported Version\nconst UnsupportedBrowserPage = () => (\n  <div>\n    <p>IE unsupported. Please use other browser.</p>\n  </div>\n);\n\nconst iEVersion = getIEVersion();\n\nif (iEVersion && iEVersion <= 11) {\n  ReactDOM.render(<UnsupportedBrowserPage />, document.getElementById(\"root\"));\n} else {\n  ReactDOM.render(\n    <HashRouter>\n      <App />\n    </HashRouter>, \n  document.getElementById(\"root\"));\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}